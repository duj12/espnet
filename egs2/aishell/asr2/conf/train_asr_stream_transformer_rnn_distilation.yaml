# network architecture
# encoder related
encoder: transformer
encoder_conf:
    output_size: 256    # dimension of attention
    attention_heads: 4
    linear_units: 2048  # the number of units of position-wise feed forward
    num_blocks: 12      # the number of encoder blocks
    dropout_rate: 0.1
    positional_dropout_rate: 0.1
    attention_dropout_rate: 0.0
    input_layer: conv2d # encoder architecture type
    normalize_before: true
    chunk_size_left: 96
    chunk_size_current: 64
    chunk_size_right: 32
    state_reuse: false

# decoder related
decoder: rnn
decoder_conf:
    rnn_type: lstm
    num_layers: 2
    hidden_size: 1024
    embed_dim: 300
    sampling_probability: 0.0   # scheduled sampling option
    dropout: 0.0
    att_conf:
        atype: MoChA
        awin: 10
        adim: 512


# hybrid CTC/attention
model_conf:
    ctc_weight: 0.3
    lsm_weight: 0.1     # label smoothing option
    length_normalized_loss: false

# minibatch related
batch_size: 188

# optimization related
accum_grad: 2
grad_clip: 5
patience: 5
max_epoch: 45
val_scheduler_criterion:
    - valid
    - acc
best_model_criterion:
-   - valid
    - acc
    - max
keep_nbest_models: 10

optim: adam
optim_conf:
    lr: 0.002
scheduler: warmuplr     # pytorch v1.1.0+ required
scheduler_conf:
    warmup_steps: 25000
# optim: adadelta
# optim_conf:
#     lr: 1.0
#     rho: 0.95
#     eps: 1.0e-08
#     weight_decay: 0
specaug: specaug
specaug_conf:
    apply_time_warp: false
    apply_freq_mask: true
    apply_time_mask: true


# transfer learning
# pretrain_path: [
#     exp/asr_train_asr_stream_transformer_RNN_fbank_pitch_char/valid.loss.best.pth]
# pretrain_key: [null]
# freeze: [encoder]
# knowledge distillation
teacher_model: exp/asr_train_asr_transformer_specaug_fbank_pitch_char/valid.loss.ave_10best.pth
distilling_weight: [1.0, 1.0]
distilling_module: [encoder, decoder]
