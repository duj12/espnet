# network architecture
# encoder related
encoder: transformer
encoder_conf:
    output_size: 256    # dimension of attention
    attention_heads: 4
    linear_units: 2048  # the number of units of position-wise feed forward
    num_blocks: 12      # the number of encoder blocks
    dropout_rate: 0.1
    positional_dropout_rate: 0.1
    attention_dropout_rate: 0.0
    input_layer: conv2d # encoder architecture type
    normalize_before: true

# decoder related
decoder: transformer
decoder_conf:
    attention_heads: 4
    linear_units: 2048
    num_blocks: 6
    dropout_rate: 0.1
    positional_dropout_rate: 0.1
    self_attention_dropout_rate: 0.0
    src_attention_dropout_rate: 0.0

# hybrid CTC/attention
model_conf:
    ctc_weight: 0.3
    lsm_weight: 0.1     # label smoothing option
    length_normalized_loss: false
    additional_tasks: masked_lm_decoder
    task_weights: 0.1
    masked_lm_path: /data/dongqinbo/espnet-distributed/egs2/LAStream/2w2-data-rvb0.2/lm/bert-base-chinese


# minibatch related
batch_size: 32

# optimization related
accum_grad: 2
grad_clip: 5
patience: 10
max_epoch: 2
val_scheduler_criterion:
    - valid
    - acc
best_model_criterion:
-   - valid
    - acc
    - max
keep_nbest_models: 10

optim: adam
optim_conf:
    lr: 0.00395
scheduler: warmuplr     # pytorch v1.1.0+ required
scheduler_conf:
    warmup_steps: 25000

specaug: specaug
specaug_conf:
    apply_time_warp: false
    apply_freq_mask: true
    apply_time_mask: true

pretrain_path: [
    exp/asr_train_asr_transformer_specaug_fbank_pitch_char/valid.loss.ave_10best.pth]
pretrain_key: [null]
freeze_mods: [mlm_model.bert]

# transfer learning
